import { useState, useEffect, useRef } from "react";
import Navigation from "@/components/Navigation";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Progress } from "@/components/ui/progress";
import { Timer, Play, Square, RotateCcw, Clock } from "lucide-react";

const Console = () => {
  // Timer and Async Testing State
  const [logs, setLogs] = useState<string[]>([]);
  const [activeTimers, setActiveTimers] = useState<Set<NodeJS.Timeout>>(new Set());
  const [activeIntervals, setActiveIntervals] = useState<Set<NodeJS.Timeout>>(new Set());
  const [promiseStates, setPromiseStates] = useState<{[key: string]: 'pending' | 'resolved' | 'rejected'}>({});
  const [timerProgress, setTimerProgress] = useState<{[key: string]: number}>({});
  const [customDelay, setCustomDelay] = useState<number>(2);
  const intervalRef = useRef<NodeJS.Timeout | null>(null);
  const [intervalCount, setIntervalCount] = useState<number>(0);
  const [isIntervalActive, setIsIntervalActive] = useState<boolean>(false);

  const addLog = (message: string, type: 'info' | 'success' | 'error' | 'warning' = 'info') => {
    const timestamp = new Date().toLocaleTimeString();
    const emoji = type === 'success' ? '‚úÖ' : type === 'error' ? '‚ùå' : type === 'warning' ? '‚ö†Ô∏è' : 'üìù';
    setLogs(prev => [...prev, `[${timestamp}] ${emoji} ${message}`]);
    
    // Also log to browser console
    console.log(`Timer Test: ${message}`);
  };

  const clearLogs = () => {
    setLogs([]);
    console.clear();
  };

  const clearAllTimers = () => {
    // Clear all active timers
    activeTimers.forEach(timer => clearTimeout(timer));
    activeIntervals.forEach(interval => clearInterval(interval));
    if (intervalRef.current) {
      clearInterval(intervalRef.current);
      intervalRef.current = null;
    }
    
    setActiveTimers(new Set());
    setActiveIntervals(new Set());
    setPromiseStates({});
    setTimerProgress({});
    setIsIntervalActive(false);
    setIntervalCount(0);
    
    addLog("–í—Å–µ —Ç–∞–π–º–µ—Ä—ã –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –æ—á–∏—â–µ–Ω—ã", 'warning');
  };

  // setTimeout Testing
  const testSetTimeout = (delay: number) => {
    const startTime = Date.now();
    const timerKey = `timeout-${Date.now()}`;
    
    addLog(`–ó–∞–ø—É—â–µ–Ω setTimeout –Ω–∞ ${delay} —Å–µ–∫`);
    console.time(`setTimeout-${delay}s`);
    
    // Progress tracking
    const progressInterval = setInterval(() => {
      const elapsed = Date.now() - startTime;
      const progress = Math.min((elapsed / (delay * 1000)) * 100, 100);
      setTimerProgress(prev => ({ ...prev, [timerKey]: progress }));
    }, 100);

    const timer = setTimeout(() => {
      console.timeEnd(`setTimeout-${delay}s`);
      addLog(`setTimeout –∑–∞–≤–µ—Ä—à–µ–Ω —á–µ—Ä–µ–∑ ${delay} —Å–µ–∫`, 'success');
      clearInterval(progressInterval);
      setTimerProgress(prev => {
        const newProgress = { ...prev };
        delete newProgress[timerKey];
        return newProgress;
      });
      setActiveTimers(prev => {
        const newSet = new Set(prev);
        newSet.delete(timer);
        return newSet;
      });
    }, delay * 1000);

    setActiveTimers(prev => new Set(prev).add(timer));
  };

  // setInterval Testing
  const startInterval = () => {
    if (isIntervalActive) return;
    
    setIsIntervalActive(true);
    setIntervalCount(0);
    addLog("–ó–∞–ø—É—â–µ–Ω setInterval (–∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É)");
    
    const interval = setInterval(() => {
      setIntervalCount(prev => {
        const newCount = prev + 1;
        console.log(`–ò–Ω—Ç–µ—Ä–≤–∞–ª —Ç–∏–∫ #${newCount}`);
        addLog(`–ò–Ω—Ç–µ—Ä–≤–∞–ª —Ç–∏–∫ #${newCount}`, 'info');
        return newCount;
      });
    }, 1000);
    
    intervalRef.current = interval;
    setActiveIntervals(prev => new Set(prev).add(interval));
  };

  const stopInterval = () => {
    if (intervalRef.current) {
      clearInterval(intervalRef.current);
      intervalRef.current = null;
      setIsIntervalActive(false);
      addLog(`–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í—Å–µ–≥–æ —Ç–∏–∫–æ–≤: ${intervalCount}`, 'warning');
      setActiveIntervals(prev => {
        const newSet = new Set(prev);
        if (intervalRef.current) newSet.delete(intervalRef.current);
        return newSet;
      });
    }
  };

  // Promise Testing
  const testPromiseSuccess = () => {
    const promiseKey = 'promise-success';
    setPromiseStates(prev => ({ ...prev, [promiseKey]: 'pending' }));
    addLog("–ó–∞–ø—É—â–µ–Ω Promise (—É—Å–ø–µ—Ö —á–µ—Ä–µ–∑ 3 —Å–µ–∫)");
    
    console.time('Promise-Success');
    const promise = new Promise((resolve) => {
      setTimeout(() => {
        resolve('–£—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!');
      }, 3000);
    });

    promise.then((result) => {
      console.timeEnd('Promise-Success');
      addLog(`Promise resolved: ${result}`, 'success');
      setPromiseStates(prev => ({ ...prev, [promiseKey]: 'resolved' }));
    });
  };

  const testPromiseError = () => {
    const promiseKey = 'promise-error';
    setPromiseStates(prev => ({ ...prev, [promiseKey]: 'pending' }));
    addLog("–ó–∞–ø—É—â–µ–Ω Promise (–æ—à–∏–±–∫–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫)");
    
    console.time('Promise-Error');
    const promise = new Promise((_, reject) => {
      setTimeout(() => {
        reject(new Error('–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞ Promise'));
      }, 2000);
    });

    promise.catch((error) => {
      console.timeEnd('Promise-Error');
      addLog(`Promise rejected: ${error.message}`, 'error');
      setPromiseStates(prev => ({ ...prev, [promiseKey]: 'rejected' }));
    });
  };

  const testPromiseAll = () => {
    const promiseKey = 'promise-all';
    setPromiseStates(prev => ({ ...prev, [promiseKey]: 'pending' }));
    addLog("–ó–∞–ø—É—â–µ–Ω Promise.all (3 –ø—Ä–æ–º–∏—Å–∞)");
    
    console.time('Promise-All');
    const promises = [
      new Promise(resolve => setTimeout(() => resolve('–†–µ–∑—É–ª—å—Ç–∞—Ç 1'), 1000)),
      new Promise(resolve => setTimeout(() => resolve('–†–µ–∑—É–ª—å—Ç–∞—Ç 2'), 2000)),
      new Promise(resolve => setTimeout(() => resolve('–†–µ–∑—É–ª—å—Ç–∞—Ç 3'), 1500))
    ];

    Promise.all(promises).then((results) => {
      console.timeEnd('Promise-All');
      addLog(`Promise.all completed: [${results.join(', ')}]`, 'success');
      setPromiseStates(prev => ({ ...prev, [promiseKey]: 'resolved' }));
    });
  };

  // Async/Await Testing
  const testAsyncAwait = async () => {
    addLog("–ó–∞–ø—É—â–µ–Ω–∞ async —Ñ—É–Ω–∫—Ü–∏—è");
    console.time('Async-Await');
    
    try {
      const result = await new Promise((resolve) => {
        setTimeout(() => resolve('Async —Ä–µ–∑—É–ª—å—Ç–∞—Ç'), 2500);
      });
      
      console.timeEnd('Async-Await');
      addLog(`Async/await completed: ${result}`, 'success');
    } catch (error) {
      addLog(`Async/await error: ${error.message}`, 'error');
    }
  };

  // Race Condition Test
  const testRaceCondition = () => {
    addLog("–¢–µ—Å—Ç –≥–æ–Ω–∫–∏ —É—Å–ª–æ–≤–∏–π: 3 –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ");
    
    // –ë—ã—Å—Ç—Ä–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
    setTimeout(() => {
      addLog("ü•á –ë—ã—Å—Ç—Ä–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è (1 —Å–µ–∫) - –§–ò–ù–ò–®!", 'success');
    }, 1000);
    
    // –°—Ä–µ–¥–Ω—è—è –æ–ø–µ—Ä–∞—Ü–∏—è
    setTimeout(() => {
      addLog("ü•à –°—Ä–µ–¥–Ω—è—è –æ–ø–µ—Ä–∞—Ü–∏—è (2 —Å–µ–∫) - —Ñ–∏–Ω–∏—à", 'success');
    }, 2000);
    
    // –ú–µ–¥–ª–µ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
    setTimeout(() => {
      addLog("ü•â –ú–µ–¥–ª–µ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è (3 —Å–µ–∫) - —Ñ–∏–Ω–∏—à", 'success');
    }, 3000);
  };

  const generateError = () => {
    try {
      throw new Error("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è DevTools Console");
    } catch (error) {
      console.error("üö® –û—à–∏–±–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", error);
      addLog("üö® –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ DevTools Console", 'error');
    }
  };

  const selectElement = (selector: string) => {
    try {
      const element = document.querySelector(selector);
      if (element) {
        console.log("Selected element:", element);
        addLog(`–≠–ª–µ–º–µ–Ω—Ç –≤—ã–±—Ä–∞–Ω: ${selector}`, 'success');
        addLog("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ DevTools Console", 'info');
      }
    } catch (error) {
      addLog(`–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞: ${error.message}`, 'error');
    }
  };

  const monitorElement = () => {
    const element = document.querySelector('#console-demo-element');
    if (element) {
      ['click', 'mouseover', 'mouseout'].forEach(eventType => {
        element.addEventListener(eventType, (e) => {
          console.log(`Event monitored: ${eventType} on`, e.target);
        });
      });
      addLog("–°–æ–±—ã—Ç–∏—è –º–æ–Ω–∏—Ç–æ—Ä—è—Ç—Å—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ DevTools Console", 'info');
    }
  };

  return (
    <div className="min-h-screen bg-background">
      <Navigation />
      
      <div className="container mx-auto px-4 py-8">
        {/* Header */}
        <div className="text-center mb-12">
          <h1 className="text-4xl font-bold mb-4 bg-gradient-primary bg-clip-text text-transparent">
            ‚è±Ô∏è Console - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–π–º–µ—Ä–æ–≤ –∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
          </h1>
          <p className="text-xl text-muted-foreground max-w-3xl mx-auto">
            –ò–∑—É—á–∞–π—Ç–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ setTimeout, setInterval, Promise –∏ async/await –∫–æ–¥–∞ —Å –ø–æ–º–æ—â—å—é –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤
          </p>
        </div>

        {/* Instructions */}
        <Card className="mb-8 bg-gradient-card border-devtools-blue/20">
          <CardHeader>
            <CardTitle className="text-devtools-blue">üìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid md:grid-cols-2 gap-6">
              <div className="space-y-3">
                <div className="bg-muted/50 p-3 rounded-lg font-mono text-sm">
                  <div className="text-devtools-green">setTimeout(callback, delay)</div>
                  <div className="text-muted-foreground">–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è</div>
                </div>
                <div className="bg-muted/50 p-3 rounded-lg font-mono text-sm">
                  <div className="text-devtools-green">setInterval(callback, delay)</div>
                  <div className="text-muted-foreground">–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã</div>
                </div>
                <div className="bg-muted/50 p-3 rounded-lg font-mono text-sm">
                  <div className="text-devtools-green">Promise.resolve/reject</div>
                  <div className="text-muted-foreground">–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –ø—Ä–æ–º–∏—Å—ã</div>
                </div>
              </div>
              <div className="space-y-3">
                <div className="bg-muted/50 p-3 rounded-lg font-mono text-sm">
                  <div className="text-devtools-orange">async/await</div>
                  <div className="text-muted-foreground">–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å</div>
                </div>
                <div className="bg-muted/50 p-3 rounded-lg font-mono text-sm">
                  <div className="text-devtools-orange">Promise.all()</div>
                  <div className="text-muted-foreground">–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–æ–≤</div>
                </div>
                <div className="bg-muted/50 p-3 rounded-lg font-mono text-sm">
                  <div className="text-devtools-orange">console.time/timeEnd</div>
                  <div className="text-muted-foreground">–ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</div>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>

        <div className="grid lg:grid-cols-2 gap-8">
          {/* Timer and Async Testing */}
          <Card className="bg-gradient-card shadow-card">
            <CardHeader>
              <CardTitle className="text-devtools-purple flex items-center gap-2">
                <Timer className="w-5 h-5" />
                ‚è±Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–π–º–µ—Ä–æ–≤ –∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
              </CardTitle>
              <CardDescription>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              
              {/* setTimeout Tests */}
              <div className="space-y-3">
                <h4 className="font-semibold text-devtools-green flex items-center gap-2">
                  <Clock className="w-4 h-4" />
                  setTimeout Tests
                </h4>
                <div className="flex gap-2 flex-wrap">
                  <Button onClick={() => testSetTimeout(2)} variant="outline" size="sm">
                    –¢–∞–π–º–µ—Ä 2 —Å–µ–∫
                  </Button>
                  <Button onClick={() => testSetTimeout(5)} variant="outline" size="sm">
                    –¢–∞–π–º–µ—Ä 5 —Å–µ–∫
                  </Button>
                  <div className="flex items-center gap-2">
                    <Input
                      type="number"
                      value={customDelay}
                      onChange={(e) => setCustomDelay(Number(e.target.value))}
                      className="w-20"
                      min="1"
                      max="10"
                    />
                    <Button onClick={() => testSetTimeout(customDelay)} variant="outline" size="sm">
                      –ö–∞—Å—Ç–æ–º–Ω—ã–π
                    </Button>
                  </div>
                </div>
                
                {/* Progress indicators */}
                {Object.entries(timerProgress).map(([key, progress]) => (
                  <div key={key} className="space-y-1">
                    <div className="text-xs text-muted-foreground">–ü—Ä–æ–≥—Ä–µ—Å—Å —Ç–∞–π–º–µ—Ä–∞</div>
                    <Progress value={progress} className="h-2" />
                  </div>
                ))}
              </div>

              {/* setInterval Tests */}
              <div className="space-y-3">
                <h4 className="font-semibold text-devtools-blue flex items-center gap-2">
                  <Play className="w-4 h-4" />
                  setInterval Tests
                </h4>
                <div className="flex gap-2 items-center">
                  <Button 
                    onClick={startInterval} 
                    variant="outline" 
                    size="sm"
                    disabled={isIntervalActive}
                  >
                    –°—Ç–∞—Ä—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
                  </Button>
                  <Button 
                    onClick={stopInterval} 
                    variant="outline" 
                    size="sm"
                    disabled={!isIntervalActive}
                  >
                    –°—Ç–æ–ø –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
                  </Button>
                  <div className="text-sm text-muted-foreground">
                    –¢–∏–∫–æ–≤: {intervalCount} | –°—Ç–∞—Ç—É—Å: {isIntervalActive ? 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' : 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
                  </div>
                </div>
              </div>

              {/* Promise Tests */}
              <div className="space-y-3">
                <h4 className="font-semibold text-devtools-orange">Promise Tests</h4>
                <div className="flex gap-2 flex-wrap">
                  <Button onClick={testPromiseSuccess} variant="outline" size="sm">
                    Promise —É—Å–ø–µ—Ö
                  </Button>
                  <Button onClick={testPromiseError} variant="outline" size="sm">
                    Promise –æ—à–∏–±–∫–∞
                  </Button>
                  <Button onClick={testPromiseAll} variant="outline" size="sm">
                    Promise.all
                  </Button>
                </div>
                
                {/* Promise states */}
                <div className="space-y-1">
                  {Object.entries(promiseStates).map(([key, state]) => (
                    <div key={key} className="text-sm flex items-center gap-2">
                      <span className="font-mono">{key}:</span>
                      <span className={
                        state === 'pending' ? 'text-yellow-500' :
                        state === 'resolved' ? 'text-green-500' :
                        'text-red-500'
                      }>
                        {state === 'pending' ? 'üü° Pending' : 
                         state === 'resolved' ? '‚úÖ Resolved' : '‚ùå Rejected'}
                      </span>
                    </div>
                  ))}
                </div>
              </div>

              {/* Async/Await and Advanced Tests */}
              <div className="space-y-3">
                <h4 className="font-semibold text-devtools-purple">–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ç–µ—Å—Ç—ã</h4>
                <div className="flex gap-2 flex-wrap">
                  <Button onClick={testAsyncAwait} variant="outline" size="sm">
                    Async/Await
                  </Button>
                  <Button onClick={testRaceCondition} variant="outline" size="sm">
                    –ì–æ–Ω–∫–∞ —É—Å–ª–æ–≤–∏–π
                  </Button>
                </div>
              </div>

              {/* Control buttons */}
              <div className="flex gap-2 pt-4 border-t">
                <Button onClick={clearAllTimers} variant="destructive" size="sm">
                  <Square className="w-4 h-4 mr-1" />
                  –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã
                </Button>
                <Button onClick={clearLogs} variant="outline" size="sm">
                  <RotateCcw className="w-4 h-4 mr-1" />
                  –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏
                </Button>
                <div className="text-xs text-muted-foreground flex items-center">
                  –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {activeTimers.size + activeIntervals.size}
                </div>
              </div>

              {/* Logs */}
              <div className="bg-muted/30 rounded-lg p-4 min-h-[200px] font-mono text-sm">
                <div className="text-devtools-green mb-2">–õ–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</div>
                {logs.length === 0 ? (
                  <div className="text-muted-foreground">–õ–æ–≥–∏ –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å...</div>
                ) : (
                  <div className="space-y-1 max-h-[150px] overflow-y-auto">
                    {logs.slice(-10).map((line, index) => (
                      <div key={index} className={
                        line.includes('‚úÖ') ? 'text-green-400' :
                        line.includes('‚ùå') ? 'text-red-400' :
                        line.includes('‚ö†Ô∏è') ? 'text-yellow-400' :
                        'text-foreground'
                      }>
                        {line}
                      </div>
                    ))}
                  </div>
                )}
              </div>
            </CardContent>
          </Card>

          {/* Interactive Elements */}
          <Card className="bg-gradient-card shadow-card">
            <CardHeader>
              <CardTitle className="text-devtools-green">üéØ –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</CardTitle>
              <CardDescription>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å–≤–æ–∏—Ö Console –∫–æ–º–∞–Ω–¥–∞—Ö</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              {/* Demo Element */}
              <div 
                id="console-demo-element"
                className="console-card p-4 rounded-lg bg-gradient-accent/20 border border-accent/30 cursor-pointer transition-smooth hover:shadow-glow"
                onClick={() => console.log('Demo element clicked!')}
              >
                <h4 className="font-semibold text-accent">–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç</h4>
                <p className="text-sm text-muted-foreground">
                  ID: console-demo-element<br/>
                  Class: console-card
                </p>
              </div>

              {/* Quick Actions */}
              <div className="space-y-3">
                <h5 className="font-semibold">–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</h5>
                
                <Button 
                  onClick={() => selectElement('#console-demo-element')}
                  variant="outline" 
                  className="w-full"
                >
                  –í—ã–±—Ä–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç –ø–æ ID
                </Button>
                
                <Button 
                  onClick={generateError}
                  variant="outline" 
                  className="w-full text-devtools-red border-devtools-red/30 hover:bg-devtools-red/10"
                >
                  –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É
                </Button>
                
                <Button 
                  onClick={monitorElement}
                  variant="outline" 
                  className="w-full"
                >
                  –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Å–æ–±—ã—Ç–∏—è
                </Button>

                <Button 
                  onClick={() => {
                    console.table([
                      { name: 'Elements', shortcut: 'Ctrl+Shift+C' },
                      { name: 'Console', shortcut: 'Ctrl+Shift+J' },
                      { name: 'Network', shortcut: 'Ctrl+Shift+E' }
                    ]);
                    addLog("–¢–∞–±–ª–∏—Ü–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ DevTools Console", 'info');
                  }}
                  variant="outline" 
                  className="w-full"
                >
                  –ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É
                </Button>
                <p className="text-xs text-muted-foreground text-center mt-1">
                  –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å –≥–æ—Ä—è—á–∏–º–∏ –∫–ª–∞–≤–∏—à–∞–º–∏ DevTools –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ (F12)
                </p>
              </div>

              {/* Quick Commands */}
              <div className="space-y-2">
                <h5 className="font-semibold text-devtools-blue">üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã:</h5>
                <div className="text-xs space-y-1 font-mono bg-muted/50 p-3 rounded-lg">
                  <div>$0.style.border = '2px solid red'</div>
                  <div>$0.textContent = '–ò–∑–º–µ–Ω–µ–Ω–æ!'</div>
                  <div>console.log($0)</div>
                  <div>monitorEvents($0, 'click')</div>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Tips */}
        <Card className="mt-8 bg-gradient-card shadow-card">
          <CardHeader>
            <CardTitle className="text-devtools-orange">üí° –°–æ–≤–µ—Ç—ã –ø–æ —Ä–∞–±–æ—Ç–µ —Å Console</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid md:grid-cols-3 gap-6">
              <div className="space-y-2">
                <h4 className="font-semibold text-devtools-blue">–ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</h4>
                <p className="text-sm text-muted-foreground">
                  –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Tab –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤ –∏ —Å–≤–æ–π—Å—Ç–≤ –æ–±—ä–µ–∫—Ç–æ–≤
                </p>
              </div>
              <div className="space-y-2">
                <h4 className="font-semibold text-devtools-green">–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è</h4>
                <p className="text-sm text-muted-foreground">
                  –§–∏–ª—å—Ç—Ä—É–π—Ç–µ –ª–æ–≥–∏ –ø–æ —Ç–∏–ø—É (Errors, Warnings, Info) –≤ –ø–∞–Ω–µ–ª–∏ Console
                </p>
              </div>
              <div className="space-y-2">
                <h4 className="font-semibold text-devtools-purple">–ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π –∫–æ–¥</h4>
                <p className="text-sm text-muted-foreground">
                  Shift+Enter –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default Console;